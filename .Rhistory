}
#' Make GET requests with repeated trials
#'
#' @param url A url, preferably from the \code{path_*} functions
#' @param attempts_left Number of attempts of trying to request from the website
get_resp <- function(url, attempts_left = 5, ...) {
stopifnot(attempts_left > 0)
resp <- httr::GET(url, config = httr::config(ssl_verifypeer = FALSE), ...)
# Ensure that returned response is application/json
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# On a successful GET, return the response
if (httr::status_code(resp) == 200) {
resp
} else if (attempts_left == 1) { # When attempts run out, stop with an error
stop_for_status(resp) # Return appropiate error message
} else { # Otherwise, sleep a second and try again
Sys.sleep(1)
get_resp_GET(url, attempts_left - 1)
}
}
id <- 'l02000012-centros-culturales'
resp <- httr::content(get_resp(path_dataset_id(id)))
data_list <- resp$result$items[[1]]
read_data <- function(data_list) {
is_file_readable <- is_readable(data_list)
if(length(is_file_readable) != 0) {
output_data <- extract_access_url(data_list)[grepl(is_file_readable, extract_access_url(data_list))] %>%
rio::import(encoding = "Latin-1") %>%
as_tibble()
} else {
output_data <- extract_access_url(data_list) %>%
as_tibble(colnames="URL") %>%
`colnames<-`(c("URL"))
}
output_data
}
read_data(data_list = data_list)
#' Make GET requests with repeated trials
#'
#' @param url A url, preferably from the \code{path_*} functions
#' @param attempts_left Number of attempts of trying to request from the website
get_resp <- function(url, attempts_left = 5, ...) {
stopifnot(attempts_left > 0)
resp <- httr::GET(url, config = httr::config(ssl_verifypeer = 0L), ...)
# Ensure that returned response is application/json
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# On a successful GET, return the response
if (httr::status_code(resp) == 200) {
resp
} else if (attempts_left == 1) { # When attempts run out, stop with an error
stop_for_status(resp) # Return appropiate error message
} else { # Otherwise, sleep a second and try again
Sys.sleep(1)
get_resp_GET(url, attempts_left - 1)
}
}
#' Make GET requests with repeated trials
#'
#' @param url A url, preferably from the \code{path_*} functions
#' @param attempts_left Number of attempts of trying to request from the website
get_resp <- function(url, attempts_left = 5, ...) {
stopifnot(attempts_left > 0)
resp <- httr::GET(url, config = httr::config(ssl_verifypeer = 0L), ...)
# Ensure that returned response is application/json
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# On a successful GET, return the response
if (httr::status_code(resp) == 200) {
resp
} else if (attempts_left == 1) { # When attempts run out, stop with an error
stop_for_status(resp) # Return appropiate error message
} else { # Otherwise, sleep a second and try again
Sys.sleep(1)
get_resp_GET(url, attempts_left - 1)
}
}
id <- 'l02000012-centros-culturales'
resp <- httr::content(get_resp(path_dataset_id(id)))
data_list <- resp$result$items[[1]]
read_data <- function(data_list) {
is_file_readable <- is_readable(data_list)
if(length(is_file_readable) != 0) {
output_data <- extract_access_url(data_list)[grepl(is_file_readable, extract_access_url(data_list))] %>%
rio::import(encoding = "Latin-1") %>%
as_tibble()
} else {
output_data <- extract_access_url(data_list) %>%
as_tibble(colnames="URL") %>%
`colnames<-`(c("URL"))
}
output_data
}
read_data(data_list = data_list)
#' Make GET requests with repeated trials
#'
#' @param url A url, preferably from \code{make_url}
#' @param attempts_left Number of attempts of trying to request from the website
#'
#' @examples
get_resp <- function(url, attempts_left = 5) {
stopifnot(attempts_left > 0)
resp <- httr::GET(url)
# Ensure that returned response is application/json
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# On a successful GET, return the response
if (httr::status_code(resp) == 200) {
resp
} else if (attempts_left == 1) { # When attempts run out, stop with an error
stop_for_status(resp) # Return appropiate error message
} else { # Otherwise, sleep a second and try again
Sys.sleep(2)
get_resp(url, attempts_left - 1)
}
}
id <- 'a02002834-numero-de-centros-segun-ancho-de-banda-de-la-conexion-a-internet-que-tiene-el-centro5'
resp <- httr::content(get_resp(path_dataset_id(id)))
data_list <- resp$result$items[[1]]
read_data <- function(data_list) {
is_file_readable <- is_readable(data_list)
if(length(is_file_readable) != 0) {
output_data <- extract_access_url(data_list)[grepl(is_file_readable, extract_access_url(data_list))] %>%
rio::import(encoding = "Latin-1") %>%
as_tibble()
} else {
output_data <- extract_access_url(data_list) %>%
as_tibble(colnames="URL") %>%
`colnames<-`(c("URL"))
}
output_data
}
read_data(data_list = data_list)
get_data <- function(data_list) {
# Check if the data_list is readable
is_file_readable <- is_readable(data_list)
# If readable, get data
# If not, get tibble with URL
if(length(is_file_readable) != 0) {
output_data <- extract_access_url(data_list)[grepl(is_file_readable, extract_access_url(data_list))] %>%
rio::import(encoding = "Latin-1") %>%
as_tibble()
} else {
output_data <- extract_access_url(data_list) %>%
as_tibble(colnames="URL") %>%
`colnames<-`(c("URL"))
}
# Output
output_data
}
get_data <- function(data_list) {
# Check if the data_list is readable
is_file_readable <- is_readable(data_list)
# If readable, get data
# If not, get tibble with URL
if(length(is_file_readable) != 0) {
output_data <- extract_access_url(data_list)[grepl(is_file_readable, extract_access_url(data_list))] %>%
rio::import(encoding = "Latin-1") %>%
as_tibble()
} else {
output_data <- extract_access_url(data_list) %>%
as_tibble %>%
`colnames<-`(c("URL"))
}
# Output
output_data
}
id <- 'l02000012-centros-culturales'
resp <- httr::content(get_resp(path_dataset_id(id)))
data_list <- resp$result$items[[1]]
get_data(data_list = data_list)
id <- 'a02002834-numero-de-centros-segun-ancho-de-banda-de-la-conexion-a-internet-que-tiene-el-centro5'
resp <- httr::content(get_resp(path_dataset_id(id)))
data_list <- resp$result$items[[1]]
get_data(data_list = data_list)
get_data(data_list = data_list)
#' Build a custom url using the httr url class
#'
#' @param path the end path of the dataset of interest
#' @param param arguments for a query
#' @param ... any other arguments to building the path correctly. See \code{modify_url}
#'
make_url <- function(path, param, ...) {
hostname <- "datos.gob.es/apidata"
# We could simply just paste together the URL
# but `httr` has better handling for
# character vectors of class url
# that deal with the structure of URL's
# more properly than I would know.
semi_url <-
structure(
list(
scheme = "https",
hostname = hostname,
path = path,
query = param,
...),
class = "url"
)
httr::build_url(semi_url)
}
#' Build a custom url using the httr url class
#'
#' @param query_path the end path of the dataset of interest
#' @param param arguments for a query
#' @param ... any other arguments to building the path correctly. See \code{modify_url}
#'
#' @return
#' @export
#'
#' @examples
make_url <- function(query_path, param = NULL, ...) {
hostname <- "datos.gob.es/apidata/catalog/dataset"
# We could simply just paste together the URL
# but `httr` has better handling for
# character vectors of class url
# that deal with the structure of URL's
# more properly than I would know.
semi_url <-
structure(
list(
scheme = "http",
hostname = hostname,
path = query_path,
query = param,
...),
class = "url"
)
build_url(semi_url)
}
#' Make GET requests with repeated trials
#'
#' @param url A url, preferably from \code{make_url}
#' @param attempts_left Number of attempts of trying to request from the website
#'
#' @examples
get_resp <- function(url, attempts_left = 5) {
stopifnot(attempts_left > 0)
resp <- httr::GET(url)
# Ensure that returned response is application/json
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# On a successful GET, return the response
if (httr::status_code(resp) == 200) {
resp
} else if (attempts_left == 1) { # When attempts run out, stop with an error
stop_for_status(resp) # Return appropiate error message
} else { # Otherwise, sleep a second and try again
Sys.sleep(2)
get_resp(url, attempts_left - 1)
}
}
#' Build a url with a complete catalog/ prefix URL
#'
#' @inheritParams make_url
path_catalog <- function(path, param = NULL, ...) {
make_url(paste0("catalog/", path), param = param, ...)
}
#' Build a url with a complete datasets/ prefix URL
#'
#' @param param Extra parameters to add to the url. For this function, this is
#' useless because there's not further paths to the dataset end point. Keeping
#' the argument for consistency
#' @param ... Extra arguments passed to \code{\link[httr]{build_url}}
path_datasets <- function(param = NULL, ...) {
path_catalog("dataset", param, ...)
}
#' Build a url with a complete publishers/ prefix URL
#'
#' @param param Extra parameters to add to the url. For this function, this is
#' useless because there's not further paths to the publishers end point. Keeping
#' the argument for consistency
#' @param ... Extra arguments passed to \code{\link[httr]{build_url}}
path_publishers <- function(param = NULL, ...) {
path_catalog("publisher", param, ...)
}
#' Build a url with a complete distribution/ prefix URL
#'
#' @param param Extra parameters to add to the url. For this function, this is
#' useless because there's not further paths to the distribution end point. Keeping
#' the argument for consistency
#' @param ... Extra arguments passed to \code{\link[httr]{build_url}}
path_distribution <- function(param = NULL, ...) {
path_catalog("distribution", param, ...)
}
#' Build a url with an ID of a dataset
#'
#' @param id dataset id from datos.gob.es such as 'l01080193-numero-total-de-edificios-con-viviendas-segun-numero-de-plantas'
#' @param param Extra parameters to add to the url.
#' @param ... Extra arguments passed to \code{\link[httr]{build_url}}
path_dataset_id <- function(id, param = NULL, ...) {
httr::modify_url(paste0(path_datasets(), "/", id), query = param, ...)
}
path_distribution
path_distribution()
library(httr)
path_distribution()
path_begin_end_date <- function(param = NULL, ...) {
path_catalog("modified", param, ...)
}
path_begin_end_date()
path_datasets("modified", param, ...)
path_begin_end_date <- function(param = NULL, ...) {
path_datasets("modified", param, ...)
}
path_datasets("modified", param, ...)
path_begin_end_date()
path_begin_end_date <- function(param = NULL, ...) {
path_datasets("modified", param, ...)
}
path_begin_end_date()
path_begin_end_date <- function(param = NULL, ...) {
path_catalog("modified", param, ...)
}
path_begin_end_date()
path_begin_end_date <- function(param = NULL, ...) {
path_catalog("modified/begin", param, ...)
}
path_begin_end_date()
path_begin_end_date <- function(param = NULL, ...) {
paste0(path_catalog("modified/begin", param, ...), param, "end/")
}
path_begin_end_date()
path_begin_end_date(param = "2016-04-18T00:00Z")
url <- parse_url("http://google.com/")
url$scheme <- "https"
url
url$query <- list(q = "hello")
build_url(url)
url$path <- "path"
build_url(url)
parse_url(path_catalog("modified/begin"))
url <- parse_url(path_catalog("modified/begin"))
build_url(url)
url$path <- paste0(url, start_date, "/end/", end_date)
start_date <- "2016-04-18T00:00Z"
end_date <- "2016-06-30T00:00Z"
url$path <- paste0(url, start_date, "/end/", end_date)
build_url(url)
paste0(url, start_date, "/end/", end_date)
url
parse_url(path_catalog("modified/begin"))
url$path <- paste0(url, start_date, "/end/", end_date)
build_url(url)
rm(url)
start_date <- "2016-04-18T00:00Z"
end_date <- "2016-06-30T00:00Z"
url <- parse_url(path_catalog("modified/begin"))
url
url
build_url(url)
url <- build_url(url)
url
url <- parse_url(path_catalog(paste0("modified/begin")))
url <- build_url(url)
url
url <- parse_url(path_catalog(paste0("modified/begin", start_date, "/end/", end_date)))
url <- build_url(url)
url
url <- parse_url(path_catalog(paste0("modified/begin/", start_date, "/end/", end_date)))
url <- build_url(path_catalog(paste0("modified/begin/", start_date, "/end/", end_date)))
url <- modify_url(path_catalog(paste0("modified/begin/", start_date, "/end/", end_date)))
url
#' Build a url with an ID of a dataset
#'
#' @param id dataset id from datos.gob.es such as 'l01080193-numero-total-de-edificios-con-viviendas-segun-numero-de-plantas'
#' @param param Extra parameters to add to the url.
#' @param ... Extra arguments passed to \code{\link[httr]{build_url}}
path_dataset_id <- function(id, param = NULL, ...) {
httr::modify_url(paste0(path_catalog(), "/", id), query = param, ...)
}
httr::modify_url(path_catalog(paste0("modified/begin/", start_date, "/end/", end_date)))
httr::modify_url(path_datasets(paste0("modified/begin/", start_date, "/end/", end_date)))
path_datasets()
path_catalog
path_catalog()
#' Build a url with a complete datasets/ prefix URL
#'
#' @param param Extra parameters to add to the url. For this function, this is
#' useless because there's not further paths to the dataset end point. Keeping
#' the argument for consistency
#' @param ... Extra arguments passed to \code{\link[httr]{build_url}}
path_datasets <- function(param = NULL, ...) {
path_catalog("dataset", param, ...)
}
path_datasets()
path_publishers("L01280066")
#' Make GET requests with repeated trials
#'
#' @param url A url, preferably from \code{make_url}
#' @param attempts_left Number of attempts of trying to request from the website
#'
#' @examples
get_resp <- function(url, attempts_left = 5) {
stopifnot(attempts_left > 0)
resp <- httr::GET(url)
# Ensure that returned response is application/json
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
# On a successful GET, return the response
if (httr::status_code(resp) == 200) {
resp
} else if (attempts_left == 1) { # When attempts run out, stop with an error
stop_for_status(resp) # Return appropiate error message
} else { # Otherwise, sleep a second and try again
Sys.sleep(2)
get_resp(url, attempts_left - 1)
}
}
#' Build a custom url using the httr url class
#'
#' @param query_path the end path of the dataset of interest
#' @param param arguments for a query
#' @param ... any other arguments to building the path correctly. See \code{modify_url}
#'
#' @return
#' @export
#'
#' @examples
make_url <- function(query_path, param = NULL, ...) {
hostname <- "datos.gob.es/apidata/catalog/dataset"
# We could simply just paste together the URL
# but `httr` has better handling for
# character vectors of class url
# that deal with the structure of URL's
# more properly than I would know.
semi_url <-
structure(
list(
scheme = "http",
hostname = hostname,
path = query_path,
query = param,
...),
class = "url"
)
build_url(semi_url)
}
path_publishers("L01280066")
#' Build a custom url using the httr url class
#'
#' @param path the end path of the dataset of interest
#' @param param arguments for a query
#' @param ... any other arguments to building the path correctly. See \code{modify_url}
#'
make_url <- function(path, param, ...) {
hostname <- "datos.gob.es/apidata"
# We could simply just paste together the URL
# but `httr` has better handling for
# character vectors of class url
# that deal with the structure of URL's
# more properly than I would know.
semi_url <-
structure(
list(
scheme = "https",
hostname = hostname,
path = path,
query = param,
...),
class = "url"
)
httr::build_url(semi_url)
}
path_publishers("L01280066")
modify_url(path_catalog(paste0("modified/begin/", start_date, "/end/", end_date)))
modify_url(path_datasets(paste0("modified/begin/", start_date, "/end/", end_date)))
#' Build a url with a complete catalog/ prefix URL
#'
#' @inheritParams make_url
path_catalog <- function(path, param = NULL, ...) {
make_url(paste0("catalog/", path), param = param, ...)
}
modify_url(path_datasets(paste0("modified/begin/", start_date, "/end/", end_date)))
}
paste0("modified/begin/", start_date, "/end/", end_date)
path_datasets(paste0("modified/begin/", start_date, "/end/", end_date))
modify_url(paste0(path_datasets("modified/begin/", start_date, "/end/", end_date)))
modify_url(paste0(path_datasets(), "modified/begin/", start_date, "/end/", end_date)))
path_datasets()
modify_url(paste0(path_datasets(), "modified/begin/", start_date, "/end/", end_date))
modify_url(paste0(path_datasets(), "/modified/begin/", start_date, "/end/", end_date))
create_date <- function(date, period) {
if(period == "year"){
output <- substr(date, 1, 4)
} else if(period == "month") {
output <- substr(date, 5, 6)
} else {
output <- substr(date, 7, 8)
}
}
create_date(date = "20180807", "day")
create_date <- function(date, period) {
if(period == "year"){
output <- substr(date, 1, 4)
} else if(period == "month") {
output <- substr(date, 5, 6)
} else {
output <- substr(date, 7, 8)
}
output
}
create_date(date = "20180807", "day")
create_date(date = "20180807", "month")
create_date(date = "20180807", "year")
