metadata <- extract_metadata(datalist)
metadata
raw_json$result$items
raw_json <- get_resp(path_dataset_id(path_id))
if (!"items" %in% names(raw_json$result)) return(list())
if (length(raw_json$result$items) == 0) return(list())
datalist <- raw_json$result$items[[1]]
metadata <- extract_metadata(datalist)
datalist -> data_list
is_file_readable <- is_readable(data_list)
is_file_readable
length(is_file_readable) != 0
is_file_readable
paste0("\\.", is_file_readable, "$")
# Add regex end of string to avoid matching the end path somewhere
# in the middle of the string
data_format <- paste0("\\.", is_file_readable, "$")
access_urls <-  extract_access_url(data_list)
acess_urls
access_urls <-  extract_access_url(data_list)
access_urls
extract_url_format(data_list)
data_list
data_list$distribution
data_list$distribution[[1]]
data_list
file_format <- extract_url_format(data_list)
file_format
# Allowed formats, in preference order
allowed_format <- c("csv", "xls", "xlsx", "json", "html", "xml")
allowed_format %in% file_format
allowed_format %in% file_format
available_formats <- allowed_format %in% file_format
names(available_formats) <- file_format
available_formats
file_format
# URL formats
file_format <- extract_url_format(data_list)
file_format
# URL formats
file_format <- extract_url_format(data_list)
# Allowed formats, in preference order
allowed_format <- c("csv", "xls", "xlsx", "json", "html", "xml")
allowed_format %in% file_format
file_format
allowed_format
file_format <- extract_url_format(data_list)
names(file_format) <- extract_url(data_list)
file_format
extract_access_url(data_list)
names(file_format) <- extract_access_url(data_list)
file_format
data_list
data_list$distribution
data_list$distribution[[1]]$format$value
data_list$distribution[[1]]$accessURL
unlist(data_list['distribution'])
distr <- unlist(data_list['distribution'])
distr[names(distr) == 'distribution.format.value']
raw_formats <- unname(distr[names(distr) == 'distribution.format.value'])
raw_formats
mimemap %in% raw_formats
names(mimemap)[mimemap %in% raw_formats]
raw_formats
which(mimemap %in% raw_formats)
match(raw_formats, mimemap)
names(mimemap)[match(raw_formats, mimemap)]
names(mimemap)[numeric()]
#' Extract the format of the dataset from data_list
#'
#' For example, csv or xml
#' @inheritParams extract_metadata
extract_url_format <- function(data_list) {
if (!data_list_correct(data_list)) {
return(character())
}
if (!'format.value' %in% names(unlist(data_list$distribution))) {
"No format available"
}
distr <- unlist(data_list['distribution'])
raw_formats <- unname(distr[names(distr) == 'distribution.format.value'])
# mimemap is a vector in R/utils.R containing all formats. For more info
# go to utils.R
correct_formats <- names(mimemap)[match(raw_formats, mimemap, nomatch = numeric())]
correct_formats
}
devtools::load_all(".")
file_format <- extract_url_format(data_list)
file_format
allowed_format <- c("csv", "xls", "xlsx", "json", "html", "xml")
allowed_format %in% file_format
allowed_format
allowed_format %in% file_format
allowed_format %in% file_format
any(numeric())
file_format
order(file_format, allowed_format)
file_format
sort(allowed_format)
file_format
factor(file_format, levels = allowed_format)
sort(factor(file_format, levels = allowed_format))
sorted_formats <- sort(factor(file_format, levels = allowed_format))
sorted_formats
sorted_formats
sorted_formats[1]
file_format <- extract_url_format(data_list)
names(file_format) <- extract_access_url(data_list)
file_format
# Allowed formats, in preference order
allowed_format <- c("csv", "xls", "xlsx", "json", "html", "xml")
available_formats <- allowed_format %in% file_format
any(available_formats)
sorted_formats <- sort(factor(file_format, levels = allowed_format))
sorted_formats
unclass(sorted_formats[1])
as.character(sorted_formats[1])
sorted_formats[1]
file_format <- extract_url_format(data_list)
names(file_format) <- extract_access_url(data_list)
allowed_format <- c("csv", "xls", "xlsx", "json", "html", "xml")
available_formats <- allowed_format %in% file_format
any(available_formats)
sort(factor(file_format, levels = allowed_format))
sorted_formats <- sort(factor(file_format, levels = allowed_format))
sorted_formats
as.character(sorted_formats)
any(available_formats)
available_formats
factor(file_format, levels = allowed_format)
sorted_formats <- sort(factor(file_format, levels = allowed_format))
sorted_formats
available_formats
sorted_formats <- sort(factor(file_format, levels = allowed_format))
sorted_formats
available_formats
available_formats[which(available_formats)[1]]
allowed_format[which(available_formats)[1]]
sorted_formats
sorted_formats
available_formats
urls <- names(sorted_formats)
formats <- as.character(sorted_formats)
formats
urls
formats %in% allowed_format
formats[formats %in% allowed_format]
#' Get prefered method to download data (if possible)
#'
#' @param data_list A data_list similar to resp$result$items[[1]] that contains information on a dataset
is_readable <- function(data_list) {
# URL formats
file_format <- extract_url_format(data_list)
names(file_format) <- extract_access_url(data_list)
# Allowed formats, in preference order
allowed_format <- c("csv", "xls", "xlsx", "json", "html", "xml")
available_formats <- allowed_format %in% file_format
if (any(available_formats)) {
sorted_formats <- sort(factor(file_format, levels = allowed_format))
urls <- names(sorted_formats)
formats <- as.character(sorted_formats)
index_formats <- formats %in% allowed_format
file_format <- formats[index_formats]
names(file_format) <- urls[index_formats]
} else {
file_format <- character(0)
}
file_format
}
is_readable(data_list)
id <- 'l01080193-numero-total-de-edificios-con-viviendas-segun-numero-de-plantas'
pt <- extract_datos(id)
resp <- get_resp(path_datasets())
data_list <- resp$result$items[[2]]
is_readable(data_list)
id <- "ea0001304-empresas-prestatarias-de-servicios-portuarios1"
resp <- get_resp(path_dataset_id(id))
data_list <- resp$result$items[[1]]
is_readable(data_list)
id <- "l01280148-contratos-mayores-4-trimestre-20141"
resp <- get_resp(path_dataset_id(id))
data_list <- resp$result$items[[1]]
id <- "ea0001304-empresas-prestatarias-de-servicios-portuarios1"
resp <- get_resp(path_dataset_id(id))
data_list <- resp$result$items[[1]]
is_readable(data_list)
id <- "l01280148-contratos-mayores-4-trimestre-20141"
resp <- get_resp(path_dataset_id(id))
data_list <- resp$result$items[[1]]
is_readable(data_list)
id <- "a16003011-toponimia-de-la-comunidad-autonoma-vasca-nombres-oficiales-y-nombres-normativizados"
resp <- get_resp(path_dataset_id(id))
data_list <- resp$result$items[[1]]
is_readable(data_list)
id <- 'l01280148-deuda-municipal-2015-20161'
resp <- get_resp(path_dataset_id(id))
data_list <- resp$result$items[[1]]
is_readable(data_list)
devtools::load_all(".")
path_id <- 'l01080193-estaciones-de-bicing-mecanicas-y-electricas'
pt <- extract_datos(id)
raw_json <- get_resp(path_dataset_id(path_id))
if (!"items" %in% names(raw_json$result)) return(list())
if (length(raw_json$result$items) == 0) return(list())
datalist <- raw_json$result$items[[1]]
metadata <- extract_metadata(datalist)
data_list <- datalist
# Check if the data_list is readable
is_file_readable <- is_readable(data_list)
is_file_readable
length(is_file_readable) != 0
is_file_readable[1]
format_to_read <- is_file_readable[1]
devtools::load_all(".")
path_id <- 'l01080193-estaciones-de-bicing-mecanicas-y-electricas'
pt <- extract_datos(id)
pt
pt$data
devtools::load_all(".")
devtools::load_all(".")
path_id <- 'l01080193-estaciones-de-bicing-mecanicas-y-electricas'
pt <- extract_datos(path_id)
id <- 'a16003011-indicadores-del-mercado-laboral-del-ano-2005-al-2014'
pt <- extract_datos(id)
pt
pt$data
id <- 'l02000011-casas-consistoriales'
pt <- extract_datos(id)
path_id <- 'l02000011-casas-consistoriales'
raw_json <- get_resp(path_dataset_id(path_id))
if (!"items" %in% names(raw_json$result)) return(list())
if (length(raw_json$result$items) == 0) return(list())
datalist <- raw_json$result$items[[1]]
data_list <- datalist
# Check if the data_list is readable
is_file_readable <- is_readable(data_list)
is_file_readable
length(is_file_readable) != 0
format_to_read <- is_file_readable[1]
fformat_to_read
format_to_read
args_rio <-
list(file = names(format_to_read),
format = format_to_read,
setclass = "tibble")
# The encoding argument is only available for the formats below, so
# it should be added only when that format is the one being read.
# I use is_file_readable and the data forms without the . because
# it's easier to match than data_format which has two slashes
if (format_to_read %in% c("csv", "html", "xml")) {
args_rio <- c(args_rio, "encoding" = "UTF-8")
# This encoding does not work perfectly. Sometimes
# it does't work and UTF-8 captures spanish accents but
# other times it doesn't.
}
output_data <- do.call(rio::import, args_rio)
# Get the first format.
format_to_read <- is_file_readable[2]
args_rio <-
list(file = names(format_to_read),
format = format_to_read,
setclass = "tibble")
# The encoding argument is only available for the formats below, so
# it should be added only when that format is the one being read.
# I use is_file_readable and the data forms without the . because
# it's easier to match than data_format which has two slashes
if (format_to_read %in% c("csv", "html", "xml")) {
args_rio <- c(args_rio, "encoding" = "UTF-8")
# This encoding does not work perfectly. Sometimes
# it does't work and UTF-8 captures spanish accents but
# other times it doesn't.
}
output_data <- do.call(rio::import, args_rio)
# Get the first format.
format_to_read <- is_file_readable[3]
args_rio <-
list(file = names(format_to_read),
format = format_to_read,
setclass = "tibble")
# The encoding argument is only available for the formats below, so
# it should be added only when that format is the one being read.
# I use is_file_readable and the data forms without the . because
# it's easier to match than data_format which has two slashes
if (format_to_read %in% c("csv", "html", "xml")) {
args_rio <- c(args_rio, "encoding" = "UTF-8")
# This encoding does not work perfectly. Sometimes
# it does't work and UTF-8 captures spanish accents but
# other times it doesn't.
}
output_data <- do.call(rio::import, args_rio)
is_file_readable
# Get the first format.
format_to_read <- is_file_readable[1]
args_rio <-
list(file = names(format_to_read),
format = format_to_read,
setclass = "tibble")
readr::read_csv(names(format_to_read))
format_to_read
data.table::fread("https://apirtod.dipucadiz.es/api/datos/casas_consistoriales.csv&rnd=1565959231")
data.table::fread("https://apirtod.dipucadiz.es/api/datos/casas_consistoriales.csv")
readr::read_csv("https://apirtod.dipucadiz.es/api/datos/casas_consistoriales.csv")
tryCatch(output_data <- do.call(rio::import, args_rio))
try(output_data <- do.call(rio::import, args_rio))
output_data <- try(do.call(rio::import, args_rio), silent = TRUE)
devtools::load_all(".")
path_id <- 'l01080193-estaciones-de-bicing-mecanicas-y-electricas'
pt <- extract_datos(path_id)
pt
devtools::load_all(".")
pt
devtools::load_all(".")
pt
path_id <- 'l01080193-estaciones-de-bicing-mecanicas-y-electricas'
pt <- extract_datos(path_id)
pt
pt$metadata
x <- try(log(-5))
x <- try(ppppss)
x <- try(stop())
x
is(x, 'try-error')
is(mtcars, 'try-error')
devtools::load_all(".")
path_id <- 'l01080193-estaciones-de-bicing-mecanicas-y-electricas'
pt <- extract_datos(path_id)
extract_url_format(data_list)
devtools::load_all(".")
path_id <- 'l01080193-estaciones-de-bicing-mecanicas-y-electricas'
raw_json <- get_resp(path_dataset_id(path_id))
if (!"items" %in% names(raw_json$result)) return(list())
if (length(raw_json$result$items) == 0) return(list())
datalist <- raw_json$result$items[[1]]
metadata <- extract_metadata(datalist)
devtools::load_all(".")
raw_json <- get_resp(path_dataset_id(path_id))
if (!"items" %in% names(raw_json$result)) return(list())
if (length(raw_json$result$items) == 0) return(list())
datalist <- raw_json$result$items[[1]]
metadata <- extract_metadata(datalist)
data_list <- datalist
# Check if the data_list is readable
is_file_readable <- is_readable(data_list)
length(is_file_readable) != 0
format_to_read <- is_file_readable[1]
args_rio <-
list(file = names(format_to_read),
format = format_to_read,
setclass = "tibble")
format_to_read
if (format_to_read %in% c("csv", "html", "xml")) {
args_rio <- c(args_rio, "encoding" = "UTF-8")
# This encoding does not work perfectly. Sometimes
# it does't work and UTF-8 captures spanish accents but
# other times it doesn't.
}
# Try reading the data
output_data <- try(do.call(rio::import, args_rio), silent = TRUE)
output_data
is(output_data, "try-error")
dplyr::as_tibble(extract_url_format(data_list),
extract_access_url(data_list))
extract_access_url(data_list)
dplyr::tibble(extract_url_format(data_list),
extract_access_url(data_list))
output_data <- dplyr::tibble(extract_url_format(data_list),
extract_access_url(data_list))
names(output_data) <- c("format", "URL")
devtools::load_all(".")
path_id <- 'l01080193-estaciones-de-bicing-mecanicas-y-electricas'
pt <- extract_datos(path_id)
pt
pt$data
devtools::load_all(".")
devtools::load_all(".")
path_id <- 'l01080193-estaciones-de-bicing-mecanicas-y-electricas'
pt <- extract_datos(path_id)
pt
pt$data
pt$metadata
devtools::load_all(".")
path_id <- 'l02000011-casas-consistoriales'
pt <- extract_datos(id)
path_id <- 'l02000011-casas-consistoriales'
pt <- extract_datos(path_id)
pt
pt$metadata
pt$data
readr::read_csv("https://apirtod.dipucadiz.es/api/datos/casas_consistoriales.csv&rnd=1565959231")
readr::read_csv("https://apirtod.dipucadiz.es/api/datos/casas_consistoriales.csv")
id <- 'a16003011-ganancia-media-y-brecha-salarial-por-hora-entre-mujeres-y-hombres-seguntipo-de-contrato-cae-y-espana-2002-y-20061'
pt <- extract_datos(id)
pt
pt$metadata
pt$data
id <- 'l01080193-numero-total-de-edificios-con-viviendas-segun-numero-de-plantas'
pt <- extract_datos(id)
pt
pt$metadata
path_id <- 'l01080193-estaciones-de-bicing-mecanicas-y-electricas'
pt <- extract_datos(id)
pt$data
pt$data
pt$metadata
# Error because we try to convert jsons to tibble
path_id <- 'l01080193-estaciones-de-bicing-mecanicas-y-electricas'
pt <- extract_datos(path_id)
pt
pt$data
id <- "ea0001304-empresas-prestatarias-de-servicios-portuarios1"
resp <- get_resp(path_dataset_id(id))
data_list <- resp$result$items[[1]]
pt <- extract_datos(id)
pt
pt$data
pt$`metadata`
readxl::read_excel("http://datos.apc.es/wcm/connect/32e9dd3e-bd06-4ba1-8c2f-356edc050ed7/DIRECTORIO+DE+EMPRESAS.xlsx?MOD=AJPERES&CONVERT_TO=url&CACHEID=ROOTWORKSPACE-32e9dd3e-bd06-4ba1-8c2f-356edc050ed7-mgxWhE0")
readxl::read_excel("http://datos.apc.es/wcm/connect/32e9dd3e-bd06-4ba1-8c2f-356edc050ed7/DIRECTORIO+DE+EMPRESAS.xlsx?MOD=AJPERES&CONVERT_TO=url&CACHEID=ROOTWORKSPACE-32e9dd3e-bd06-4ba1-8c2f-356edc050ed7-mgxWhE0")
readxl::read_xlsx("http://datos.apc.es/wcm/connect/32e9dd3e-bd06-4ba1-8c2f-356edc050ed7/DIRECTORIO+DE+EMPRESAS.xlsx?MOD=AJPERES&CONVERT_TO=url&CACHEID=ROOTWORKSPACE-32e9dd3e-bd06-4ba1-8c2f-356edc050ed7-mgxWhE0")
readxl::read_xlsx("")
readxl::read_xlsx("../../../../Downloads/DIRECTORIO+DE+EMPRESAS.xlsx")
id <- "a16003011-toponimia-de-la-comunidad-autonoma-vasca-nombres-oficiales-y-nombres-normativizados"
resp <- get_resp(path_dataset_id(id))
data_list <- resp$result$items[[1]]
is_readable(data_list)
pt <- extract_datos(id)
pt
pt$data
readr::read_csv("http://opendata.euskadi.eus/contenidos/ds_geograficos/md_ideeu_toponimia/es_def/adjuntos/ngeus.csv")
readr::read_csv2("http://opendata.euskadi.eus/contenidos/ds_geograficos/md_ideeu_toponimia/es_def/adjuntos/ngeus.csv")
id <- 'l01280148-deuda-municipal-2015-20161'
resp <- get_resp(path_dataset_id(id))
data_list <- resp$result$items[[1]]
is_readable(data_list)
pt <- extract_datos(id)
pt
pt$data
pt$metadata
id <- "l01280148-contratos-mayores-4-trimestre-20141"
resp <- get_resp(path_dataset_id(id))
data_list <- resp$result$items[[1]]
is_readable(data_list)
pt <- extract_datos(id)
pt
id <- "ea0001304-empresas-prestatarias-de-servicios-portuarios1"
resp <- get_resp(path_dataset_id(id))
data_list <- resp$result$items[[1]]
id <- 'l01080193-numero-total-de-edificios-con-viviendas-segun-numero-de-plantas'
pt <- extract_datos(id)
id <- "a16003011-toponimia-de-la-comunidad-autonoma-vasca-nombres-oficiales-y-nombres-normativizados"
resp <- get_resp(path_dataset_id(id))
data_list <- resp$result$items[[1]]
is_readable(data_list)
pt <- extract_datos(id)
pt
getOption("width")
x <- pt
es_index <- x$metadata$language == "es"
if (any(es_index)) {
metadata <- x$metadata[x$metadata$language == "es", ]
} else {
metadata <- x$metadata[1, ]
}
has_url_col <- ncol(x$data) == 2 & all(names(x$data) %in% c('format', "URL"))
was_read  <- if (has_url_col) FALSE else TRUE
was_read
metadata$description
getOption("width")
metadata$description[seq_len(getOption("width"))]
cat_line
format(metadata$description, width = 135)
format(metadata$description, width = 50)
cat(format(metadata$description, width = 80))
cat(format(metadata$description, width = 10))
format(metadata$description, width = 10)
?format(metadata$description, width = 10)
format(metadata$description, max.print = 10)
format
format.default
format(metadata$description, nsmall = 5)
format(metadata$description, width = 10)
metadata$description
stringr::str_pad(metadata$description, width = 5)
stringr::str_pad(metadata$description)
?stringr::str_pad(metadata$description)
stringr::str_trunc(metadata$description, 10)
stringr::str_trunc(metadata$description, 10, 80)
stringr::str_trunc(metadata$description, 80)
stringr::str_trunc(metadata$description, getOption("width"))
stringr::str_trunc(metadata$description, getOption("width") - 10)
str_trunc
stringr::str_trunc
strtrim(metadata$description, 180)
strtrim(metadata$description, 170)
strtrim(metadata$description, 100)
stringr::str_trunc(metadata$description, 100)
stringr::str_trunc(metadata$description, 100)
stringr::str_trunc
strtrim
strtrim(metadata$description, 100)
paste0(strtrim(metadata$description, 100), ...)
paste0(strtrim(metadata$description, 100), "...")
paste0(strtrim(metadata$description, getOption("width")), "...")
paste0("   Description: ", strtrim(metadata$description, getOption("width")), "...")
devtools::load_all(".")
id <- "a16003011-toponimia-de-la-comunidad-autonoma-vasca-nombres-oficiales-y-nombres-normativizados"
resp <- get_resp(path_dataset_id(id))
data_list <- resp$result$items[[1]]
is_readable(data_list)
pt <- extract_datos(id)
pt
getOption("width")
